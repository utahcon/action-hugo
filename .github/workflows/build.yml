name: Build action-hugo

on:
  push:
    branches:
      - build*

jobs:
  version:
    name: Get Build Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - id: version
        run: |
          VERSION=${{ github.ref }}
          echo "::set-output name=version::${VERSION#*-}"

  hugo:
    name: Checkout and build Hugo
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Checkout hugo
        uses: actions/checkout@v2.3.1
        with:
          path: hugodir
          repository: gohugoio/hugo
          submodules: true
          fetch-depth: 0

      - name: Build hugo
        run: |
          (
            cd hugodir
            git checkout ${{ needs.version.outputs.version }}
            go install --tags extended
          )
          mv $HOME/go/bin/hugo .

      - uses: actions/upload-artifact@v2
        with:
          name: hugo
          path: hugo

  action:
    name: Checkout action-hugo
    runs-on: ubuntu-latest
    needs:
      - hugo
      - version
    steps:
      - name: Checkout action-hugo
        uses: actions/checkout@v2.3.1

      - name: Fetch all
        run: git fetch --all

      - name: Remove conflicting tags
        run: |
          for T in $(git tag); do
            if [ "${T}" == "${{ needs.version.outputs.version }}" ]; then
              git push origin :refs/tags/${{ needs.version.outputs.version }}
            fi
          done

      - name: Remove conflicting branches
        run: |
          for B in $(git branch -r); do
            if [ "${B}" == "origin/release-${{ needs.version.outputs.version }}" ]; then
              git push origin :release-${{ needs.version.outputs.version }}
            fi
          done

  build_and_push_container:
    name: Build and push action-hugo container
    runs-on: ubuntu-latest
    needs:
      - hugo
      - version
      - action
    steps:
      - uses: actions/checkout@v2.3.1
        with:
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2
        with:
          name: hugo
          path: .

      - run: chmod +x hugo

      - name: Identify
        run: |
          git config --global user.email "github@utahcon.com"
          git config --global user.name "Adam Barrett"

      - name: Create and checkout release branch
        run: git checkout -b release-${{ needs.version.outputs.version }}

      - name: Create and commit action.yml
        run: |
          function trim_left {
            # shellcheck disable=SC2001
            echo "${1}" | sed -e "s/^\s*//"
          }

          YML_INPUTS=""
          YML_ARGS=""
          ENTRY=""
          IFS=$'\n'
          START="\$"
          START+="{{"
          END="}}"

          COUNT=1

          for FLAG in $(./hugo --help | grep "^\s*-.*"); do
            FLAG=$(trim_left "${FLAG}")

            SHORT=${FLAG%%--*}
            SHORT=$(trim_left "${SHORT}")
            FLAG=${FLAG#*--}

            FLAG=$(trim_left "${FLAG}")
            LONG=${FLAG%% *}
            LONG=$(trim_left "${LONG}")

            FLAG=${FLAG#* }
            ARG=${FLAG%% *}

            FLAG=${FLAG#* }
            DESC=$(trim_left "${FLAG}")
            DESC=$(echo $DESC | sed "s/'/\\\'/g")

            YML_INPUTS+="\n  ${LONG}:\n    description: '${DESC}'\n    required: false"
            YML_ARGS+="\n    - ${START} inputs.${LONG} ${END}"
            ENTRY+="\n      ${COUNT}) ARGUMENTS+=\"--${LONG} \${1} \";;"

            ((COUNT=COUNT+1))
          done

          sed -i "s;%%INPUTS%%;${YML_INPUTS};" action.yml
          sed -i "s/%%VERSION%%/${{ needs.version.outputs.version }}/" action.yml
          sed -i "s/%%ARGS%%/${YML_ARGS}/" action.yml

          sed -i "s/%%ENTRY%%/${ENTRY}/" entrypoint.sh.tmp > entrypoint.sh

          git add action.yml entrypoint.sh
          git commit -m "Updating action.yml with version ${{ needs.version.outputs.version }}"
          git push origin release-${{ needs.version.outputs.version }}

      - name: Create version tag
        run: git tag -af ${{ needs.version.outputs.version }} -m "Version ${{ needs.version.outputs.version }}"

      - name: Push release branch and tags
        run: git push origin release-${{ needs.version.outputs.version }} --tags --force

      - uses: docker/build-push-action@v1.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          repository: utahcon/hugo
          dockerfile: Containerfile
          tags: ${{ needs.checkout_action.outputs.version }}
